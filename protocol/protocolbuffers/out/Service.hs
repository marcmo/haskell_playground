module Service (protoInfo, fileDescriptorProto) where
import Prelude ((+))
import qualified Prelude as P'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = P'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".service\", haskellPrefix = [], parentModule = [], baseName = MName \"Service\"}, protoFilePath = [\"Service.hs\"], protoSource = \"common.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".service.Void\", haskellPrefix = [], parentModule = [MName \"Service\"], baseName = MName \"Void\"}, descFilePath = [\"Service\",\"Void.hs\"], isGroup = False, fields = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".service.AckVoid\", haskellPrefix = [], parentModule = [MName \"Service\"], baseName = MName \"AckVoid\"}, descFilePath = [\"Service\",\"AckVoid.hs\"], isGroup = False, fields = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".service.ServiceId\", haskellPrefix = [], parentModule = [MName \"Service\"], baseName = MName \"ServiceId\"}, descFilePath = [\"Service\",\"ServiceId.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".service.ServiceId.id\", haskellPrefix' = [], parentModule' = [MName \"Service\",MName \"ServiceId\"], baseName' = FName \"id\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".service.ServiceId.instId\", haskellPrefix' = [], parentModule' = [MName \"Service\",MName \"ServiceId\"], baseName' = FName \"instId\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 16}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 5}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".service.NotificationServiceEndpoint\", haskellPrefix = [], parentModule = [MName \"Service\"], baseName = MName \"NotificationServiceEndpoint\"}, descFilePath = [\"Service\",\"NotificationServiceEndpoint.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".service.NotificationServiceEndpoint.service\", haskellPrefix' = [], parentModule' = [MName \"Service\",MName \"NotificationServiceEndpoint\"], baseName' = FName \"service\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".service.ServiceId\", haskellPrefix = [], parentModule = [MName \"Service\"], baseName = MName \"ServiceId\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False}], enums = [], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\151\SOH\n\fcommon.proto\DC2\aservice\"\ACK\n\EOTVoid\"\t\n\aAckVoid\"'\n\tServiceId\DC2\n\n\STXid\CAN\SOH \STX(\ENQ\DC2\SO\n\ACKinstId\CAN\STX \SOH(\ENQ\"B\n\ESCNotificationServiceEndpoint\DC2#\n\aservice\CAN\SOH \STX(\v2\DC2.service.ServiceId")